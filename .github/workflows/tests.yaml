name: Tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  tests:
    name: Tests (PHP ${{ matrix.php-version }}, Composer ${{ matrix.composer-version }} & ${{ matrix.dependencies }} dependencies)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ["8.1", "8.2", "8.3"]
        composer-version: ["2.1", "2.2", "2.3", "2.4", "2.5", "2.6", "2.7"]
        dependencies: ["highest", "lowest"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Prepare environment
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v${{ matrix.composer-version }}
          coverage: none

      # Install dependencies
      - name: Install Composer dependencies
        uses: ramsey/composer-install@v2
        with:
          dependency-versions: ${{ matrix.dependencies }}
          # Composer < 2.7 is not compatible with symfony/console 7.x
          composer-options: ${{ matrix.composer-version != '2.7' && '--with symfony/console:<7' }}

      # Run tests
      - name: Run tests
        run: composer test:unit

  coverage:
    name: Test coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Prepare environment
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          tools: composer:v2
          coverage: pcov

      # Install dependencies
      - name: Install Composer dependencies
        uses: ramsey/composer-install@v2
        with:
          dependency-versions: highest
          # @todo Remove once Composer 2.7 is released and supported
          # Composer < 2.7 is not compatible with symfony/console 7.x
          composer-options: "--with symfony/console:<7"

      # Run Unit tests
      - name: Build coverage directory
        run: mkdir -p .build/coverage
      - name: Run Unit tests with coverage
        run: composer test:unit:coverage

      # Upload artifact
      - name: Fix coverage path
        working-directory: .build/coverage
        run: sed -i 's#/home/runner/work/project-builder/project-builder#${{ github.workspace }}#g' clover.xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: .build/coverage/clover.xml
          retention-days: 7

  coverage-report:
    name: Report test coverage
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download artifact
      - name: Download coverage artifact
        id: download
        uses: actions/download-artifact@v4
        with:
          name: coverage

      # CodeClimate
      - name: CodeClimate report
        uses: paambaati/codeclimate-action@v5.0.0
        if: env.CC_TEST_REPORTER_ID
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: |
            ${{ steps.download.outputs.download-path }}/clover.xml:clover

      # codecov
      - name: codecov report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            ${{ steps.download.outputs.download-path }}/clover.xml
          fail_ci_if_error: true
          verbose: true

  docker:
    name: Docker tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Handle Docker image layer cache
      - name: Handle Docker cache
        uses: jpribyl/action-docker-layer-caching@v0.1.1
        continue-on-error: true

      # Run Docker tests
      - name: Run Docker tests
        run: tests/docker/docker-build.sh --cache --verbose
